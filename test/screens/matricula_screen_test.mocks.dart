// Mocks generated by Mockito 5.4.6 from annotations
// in app/test/screens/matricula_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i8;

import 'package:app/features/controllers/disciplinas_controllers.dart' as _i11;
import 'package:app/features/controllers/matricula_controllers.dart' as _i5;
import 'package:app/features/controllers/user_controllers.dart' as _i9;
import 'package:app/core/services/auth_service.dart' as _i3;
import 'package:app/domain/models/days.dart' as _i12;
import 'package:app/domain/models/disciplinas.dart' as _i10;
import 'package:app/domain/models/matricula.dart' as _i6;
import 'package:app/domain/models/user.dart' as _i4;
import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseFirestore_0 extends _i1.SmartFake
    implements _i2.FirebaseFirestore {
  _FakeFirebaseFirestore_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthService_1 extends _i1.SmartFake implements _i3.AuthService {
  _FakeAuthService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_2 extends _i1.SmartFake implements _i4.User {
  _FakeUser_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MatriculaController].
///
/// See the documentation for Mockito's code generation for more information.
class MockMatriculaController extends _i1.Mock
    implements _i5.MatriculaController {
  @override
  _i2.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i2.FirebaseFirestore);

  @override
  List<_i6.Matricula> get matriculas => (super.noSuchMethod(
        Invocation.getter(#matriculas),
        returnValue: <_i6.Matricula>[],
        returnValueForMissingStub: <_i6.Matricula>[],
      ) as List<_i6.Matricula>);

  @override
  set matriculas(List<_i6.Matricula>? _matriculas) => super.noSuchMethod(
        Invocation.setter(
          #matriculas,
          _matriculas,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void initializeMatriculas(List<_i6.Matricula>? matriculas) =>
      super.noSuchMethod(
        Invocation.method(
          #initializeMatriculas,
          [matriculas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Matricula? getMatricula(String? matricula) => (super.noSuchMethod(
        Invocation.method(
          #getMatricula,
          [matricula],
        ),
        returnValueForMissingStub: null,
      ) as _i6.Matricula?);

  @override
  _i7.Future<bool> setMatricula(_i6.Matricula? matricula) =>
      (super.noSuchMethod(
        Invocation.method(
          #setMatricula,
          [matricula],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> updateMatricula(_i6.Matricula? matricula) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMatricula,
          [matricula],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<List<_i6.Matricula>> getAllMatriculas() => (super.noSuchMethod(
        Invocation.method(
          #getAllMatriculas,
          [],
        ),
        returnValue: _i7.Future<List<_i6.Matricula>>.value(<_i6.Matricula>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i6.Matricula>>.value(<_i6.Matricula>[]),
      ) as _i7.Future<List<_i6.Matricula>>);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UserController].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserController extends _i1.Mock implements _i9.UserController {
  @override
  _i3.AuthService get authService => (super.noSuchMethod(
        Invocation.getter(#authService),
        returnValue: _FakeAuthService_1(
          this,
          Invocation.getter(#authService),
        ),
        returnValueForMissingStub: _FakeAuthService_1(
          this,
          Invocation.getter(#authService),
        ),
      ) as _i3.AuthService);

  @override
  _i2.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i2.FirebaseFirestore);

  @override
  set user(_i4.User? _user) => super.noSuchMethod(
        Invocation.setter(
          #user,
          _user,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set matricula(_i6.Matricula? _matricula) => super.noSuchMethod(
        Invocation.setter(
          #matricula,
          _matricula,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i7.Future<_i4.User?> login({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i7.Future<_i4.User?>.value(),
        returnValueForMissingStub: _i7.Future<_i4.User?>.value(),
      ) as _i7.Future<_i4.User?>);

  @override
  _i7.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> forgetPassword(String? email) => (super.noSuchMethod(
        Invocation.method(
          #forgetPassword,
          [email],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<_i4.User?> register({
    required String? email,
    required String? firstName,
    required String? lastName,
    required String? password,
    required String? phone,
    required _i6.Matricula? matricula,
    dynamic isStaff = false,
    dynamic isSuperUser = false,
    dynamic isActive = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
          {
            #email: email,
            #firstName: firstName,
            #lastName: lastName,
            #password: password,
            #phone: phone,
            #matricula: matricula,
            #isStaff: isStaff,
            #isSuperUser: isSuperUser,
            #isActive: isActive,
          },
        ),
        returnValue: _i7.Future<_i4.User?>.value(),
        returnValueForMissingStub: _i7.Future<_i4.User?>.value(),
      ) as _i7.Future<_i4.User?>);

  @override
  bool checkDisciplinasThisUserInMatricula() => (super.noSuchMethod(
        Invocation.method(
          #checkDisciplinasThisUserInMatricula,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i7.Future<bool> removeDisciplinaThisUser(
          {required _i10.Disciplina? disciplina}) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeDisciplinaThisUser,
          [],
          {#disciplina: disciplina},
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<_i4.User> updateUser({required _i4.User? user}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [],
          {#user: user},
        ),
        returnValue: _i7.Future<_i4.User>.value(_FakeUser_2(
          this,
          Invocation.method(
            #updateUser,
            [],
            {#user: user},
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i4.User>.value(_FakeUser_2(
          this,
          Invocation.method(
            #updateUser,
            [],
            {#user: user},
          ),
        )),
      ) as _i7.Future<_i4.User>);

  @override
  _i7.Future<_i4.User?> getUserByMatriculaForLogin(
          {required String? matricula}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserByMatriculaForLogin,
          [],
          {#matricula: matricula},
        ),
        returnValue: _i7.Future<_i4.User?>.value(),
        returnValueForMissingStub: _i7.Future<_i4.User?>.value(),
      ) as _i7.Future<_i4.User?>);

  @override
  _i7.Future<_i4.User?> getUserByEmailForLogin({required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserByEmailForLogin,
          [],
          {#email: email},
        ),
        returnValue: _i7.Future<_i4.User?>.value(),
        returnValueForMissingStub: _i7.Future<_i4.User?>.value(),
      ) as _i7.Future<_i4.User?>);

  @override
  _i7.Future<_i4.User?> getUserByMatricula({required String? matricula}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserByMatricula,
          [],
          {#matricula: matricula},
        ),
        returnValue: _i7.Future<_i4.User?>.value(),
        returnValueForMissingStub: _i7.Future<_i4.User?>.value(),
      ) as _i7.Future<_i4.User?>);

  @override
  _i7.Future<List<_i4.User>> getAllUsers() => (super.noSuchMethod(
        Invocation.method(
          #getAllUsers,
          [],
        ),
        returnValue: _i7.Future<List<_i4.User>>.value(<_i4.User>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i4.User>>.value(<_i4.User>[]),
      ) as _i7.Future<List<_i4.User>>);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DisciplinasController].
///
/// See the documentation for Mockito's code generation for more information.
class MockDisciplinasController extends _i1.Mock
    implements _i11.DisciplinasController {
  @override
  List<_i10.Disciplina> get disciplinas => (super.noSuchMethod(
        Invocation.getter(#disciplinas),
        returnValue: <_i10.Disciplina>[],
        returnValueForMissingStub: <_i10.Disciplina>[],
      ) as List<_i10.Disciplina>);

  @override
  Map<String, List<_i12.Days>> get days => (super.noSuchMethod(
        Invocation.getter(#days),
        returnValue: <String, List<_i12.Days>>{},
        returnValueForMissingStub: <String, List<_i12.Days>>{},
      ) as Map<String, List<_i12.Days>>);

  @override
  _i2.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i2.FirebaseFirestore);

  @override
  set disciplinas(List<_i10.Disciplina>? _disciplinas) => super.noSuchMethod(
        Invocation.setter(
          #disciplinas,
          _disciplinas,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set days(Map<String, List<_i12.Days>>? _days) => super.noSuchMethod(
        Invocation.setter(
          #days,
          _days,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void initializeDisciplinas(List<_i10.Disciplina>? disciplinas) =>
      super.noSuchMethod(
        Invocation.method(
          #initializeDisciplinas,
          [disciplinas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<List<_i10.Disciplina>> getDisciplinas() => (super.noSuchMethod(
        Invocation.method(
          #getDisciplinas,
          [],
        ),
        returnValue:
            _i7.Future<List<_i10.Disciplina>>.value(<_i10.Disciplina>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i10.Disciplina>>.value(<_i10.Disciplina>[]),
      ) as _i7.Future<List<_i10.Disciplina>>);

  @override
  _i7.Future<List<_i12.Days>?> getDays(
          {required _i10.Disciplina? disciplina}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDays,
          [],
          {#disciplina: disciplina},
        ),
        returnValue: _i7.Future<List<_i12.Days>?>.value(),
        returnValueForMissingStub: _i7.Future<List<_i12.Days>?>.value(),
      ) as _i7.Future<List<_i12.Days>?>);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
